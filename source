local ReplicatedStorage = game:GetService("ReplicatedStorage")

local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Kinlei/MaterialLua/master/Module.lua"))()
local Frame = Library.Load({
	Title = "PSX Hub",
	Style = 1,
	SizeX = 500,
	SizeY = 350,
	Theme = "Dark"
})

local Framework = ReplicatedStorage:WaitForChild("Framework")
local _L = require(Framework:WaitForChild("Library"))

local EventNetwork = getupvalue(getupvalue(getrawmetatable(_L.Network).__index, 1).Fire, 2)
local FunctionNetwork = getupvalue(getupvalue(getrawmetatable(_L.Network).__index, 1).Invoke, 2)
local Network = {
    ["Fire"] = function(EventName, ...)
        local Event = EventNetwork(EventName)
        Event:FireServer(...)
    end,
    ["Invoke"] = function(FunctionName, ...)
        local Function = FunctionNetwork(FunctionName)
        Function:InvokeServer(...)
    end
}

local CurrencyOrder = {
	"Doodle Coins",
	"Rainbow Coins",
	"Tech Coins",
	"Fantasy Coins",
	"Coins",
	"Diamonds",
}

local Places = {
	-- Miscellaneous
	["VIP"] = {"VIP"},

	-- Spawn
	["Town"] = {"Town", "Town FRONT"},
	["Forest"] = {"Forest", "Forest FRONT"},
	["Beach"] = {"Beach", "Beach FRONT"},
	["Mine"] = {"Mine", "Mine FRONT"},
	["Winter"] = {"Winter", "Winter FRONT"},
	["Glacier"] = {"Glacier", "Glacier Lake"},
	["Desert"] = {"Desert", "Desert FRONT"},
	["Volcano"] = {"Volcano", "Volcano FRONT"},

	-- Fantasy
	["Enchanted Forest"] = {"Enchanted Forest", "Enchanted Forest FRONT"},
	["Ancient"] = {"Ancient"},
	["Samurai"] = {"Samurai", "Samurai FRONT"},
	["Candy"] = {"Candy"},
	["Haunted"] = {"Haunted", "Haunted FRONT"},
	["Hell"] = {"Hell"},
	["Heaven"] = {"Heaven"},

	-- Tech
	["Ice Tech"] = {"Ice Tech"},
	["Tech City"] = {"Tech City", "Tech City FRONT"},
	["Dark Tech"] = {"Dark Tech", "Dark Tech FRONT"},
	["Steampunk"] = {"Steampunk", "Steampunk FRONT"},
	["Alien Forest"] = {"Alien Forest", "Alien Forest FRONT"},
	["Alien Lab"] = {"Alien Lab", "Alien Lab FRONT"},
	["Glitch"] = {"Glitch", "Glitch FRONT"},
	["Hacker Portal"] = {"Hacker Portal", "Hacker Portal FRONT"},

	-- Axolotl
	["Axolotl Ocean"] = {"Axolotl Ocean", "Axolotl Ocean FRONT"},
	["Axolotl Deep Ocean"] = {"Axolotl Deep Ocean", "Axolotl Deep Ocean FRONT"},
	["Axolotl Cave"] = {"Axolotl Cave", "Axolotl Cave FRONT"},

	-- Pixel
	["Pixel Forest"] = {"Pixel Forest", "Pixel Forest FRONT"},
	["Pixel Kyoto"] = {"Pixel Kyoto", "Pixel Kyoto FRONT"},
	["Pixel Alps"] = {"Pixel Alps", "Pixel Alps FRONT"},
	["Pixel Vault"] = {"Pixel Vault", "Pixel Vault FRONT"},

	-- Cat
	["Cat Paradise"] = {"Cat Paradise", "Cat Paradise FRONT"},
	["Cat Backyard"] = {"Cat Backyard", "Cat Backyard FRONT"},
	["Cat Taiga"] = {"Cat Taiga", "Cat Taiga FRONT"},
	["Cat Kingdom"] = {"Cat Kingdom", "Cat Kingdom FRONT"}
}

local AreaList = {
	-- Miscellaneous
	"All", "VIP",

	-- Spawn
	"Town", "Forest", "Beach", "Mine", "Winter", "Glacier", "Desert", "Volcano",

	-- Fantasy
	"Enchanted Forest", "Ancient", "Samurai", "Candy", "Haunted", "Hell", "Heaven",

	-- Tech
	"Ice Tech", "Tech City", "Dark Tech", "Steampunk", "Alien Lab", "Alien Forest", "Glitch", "Hacker Portal",

	-- Axolotl
	"Axolotl Ocean", "Axolotl Deep Ocean", "Axolotl Cave",

	-- Pixel
	"Pixel Forest", "Pixel Kyoto", "Pixel Alps", "Pixel Vault",

	-- Cat
	"Cat Paradise", "Cat Backyard", "Cat Taiga", "Cat Kingdom"
}

local ChestList = {
	-- Miscellaneous
	"All",

	-- Spawn
	"Magma Chest",

	-- Fantasy
	"Enchanted Chest", "Hell Chest", "Haunted Chest", "Angel Chest", "Grand Heaven Chest",

	-- Tech
	"Giant Tech Chest", "Giant Steampunk Chest", "Giant Alien Chest",  "Giant Hacker Chest",

	-- Axolotl
	"Giant Ocean Chest",

	-- Pixel
	"Giant Pixel Chest",

	-- Cat
	"Giant Cat Chest"
}

local Folder = _L.Things
local Coins = Folder:WaitForChild("Coins")
local Lootbags = Folder:WaitForChild("Lootbags")
local Orbs = Folder:WaitForChild("Orbs")
Lootbags.ChildAdded:Connect(function(Lootbag)
	repeat
		task.wait()
	until Lootbag:GetAttribute("ReadyForCollection", true)
	Lootbag:SetAttribute("Collected", true)
	Network.Fire("Collect Lootbag", Lootbag.Name, Lootbag.CFrame.Position)
	Lootbag:Destroy()
end)

Orbs.ChildAdded:Connect(function(Orb)
	Network.Fire("Claim Orbs", {Orb.Name})
end)

function FarmCoin(CoinId, PetId)
	-- Network.Fire("Change Pet Target", PetId, "Coin", CoinId)
	Network.Invoke("Join Coin", CoinId, {PetId})
	Network.Fire("Farm Coin", CoinId, PetId)
end

function ReturnPets()
	local ReturnTable = {}
	local Save = _L.Save.Get(_L.LocalPlayer, true)
	for Index, PetData in ipairs(Save.Pets) do
		if PetData.e then
			table.insert(ReturnTable, PetData.uid)
		end
	end

	return ReturnTable
end

function ReturnCoins(Area)
	local ReturnTable = {}
	local ListCoins = Network.Invoke("Get Coins")
	for Id, CoinData in pairs(ListCoins) do
		if Area == "All" or table.find(Places[Area], CoinData.a) then
			local Table = CoinData
			Table.Index = Id
			table.insert(ReturnTable, Table)
		end
	end

	return ReturnTable
end

local AreaWorldTable = {}
for Index, v in pairs(ReplicatedStorage.Game.Coins:GetChildren()) do
	for Index, b in pairs(v:GetChildren()) do
		table.insert(AreaWorldTable, b.Name)
	end

	table.insert(AreaWorldTable, v.Name)
end

function ReturnChests()
    local ReturnTable = {}
    local ListCoins = Network.Invoke("Get Coins")
    for Id, ChestData in pairs(ListCoins) do
        local Table = ChestData
        Table.Index = Id
        for Index, bb in pairs(AreaWorldTable) do
            if string.find(ChestData.n, bb) then
                local ExtraData = string.gsub(ChestData.n, bb .. " ", "")
                if table.find(ChestList, ExtraData) then
                    Table.n = ExtraData
                    table.insert(ReturnTable, Table)
                end
            end
        end
    end

    return ReturnTable
end

local FarmTab = Frame.New({
	Title = "Farming"
})

FarmTab.Toggle({
	Text = "AutoFarm",
	Callback = function(Value)
		Settings.AutoFarm.FarmingEnabled = Value
		local CurrentFarmingPets = {}
		while task.wait() and Settings.AutoFarm.FarmingEnabled do
			local ReturnedPets = ReturnPets()
			if Settings.AutoFarm.FarmingType == "Normal" then
				for Index, CoinData in pairs(ReturnCoins(Settings.AutoFarm.FarmingArea)) do
					if Settings.AutoFarm.FarmingEnabled and Coins:FindFirstChild(CoinData.Index) then
						for Index, PetId in pairs(ReturnPets()) do
							coroutine.wrap(function()
								FarmCoin(CoinData.Index, PetId)
							end)()
						end

						repeat
							task.wait()
						until not Coins:FindFirstChild(CoinData.Index)
					end
				end
			elseif Settings.AutoFarm.FarmingType == "Chest" then
				for Index, ChestData in pairs(ReturnChests()) do
					if Settings.AutoFarm.FarmingSingleChest == "All" or ChestData.n == Settings.AutoFarm.FarmingSingleChest then
						for Index, PetId in pairs(ReturnPets()) do
							coroutine.wrap(function()
								FarmCoin(ChestData.Index, PetId)
							end)()
						end

						repeat
							task.wait()
						until not Coins:FindFirstChild(ChestData.Index) or #Coins[ChestData.Index].Pets:GetChildren() < 1
					end
				end
			elseif Settings.AutoFarm.FarmingType == "Multi Target" then
				local CoinData = ReturnCoins(Settings.AutoFarm.FarmingArea)
				for i = 1, #CoinData do
					if i % #ReturnedPets == #ReturnedPets - 1 then
						wait()
					end

					if not CurrentFarmingPets[ReturnedPets[i % #ReturnedPets + 1]] then
						wait(0.1)
						spawn(function()
							CurrentFarmingPets[ReturnedPets[i % #ReturnedPets + 1]] = "Farming"
							FarmCoin(CoinData[i].Index, ReturnedPets[i%#ReturnedPets+1])
							repeat
								task.wait()
							until not Coins:FindFirstChild(CoinData[i].Index) or #Coins:FindFirstChild(CoinData[i].Index).Pets:GetChildren() < 1
							CurrentFarmingPets[ReturnedPets[i % #ReturnedPets + 1]] = nil
						end)
					end
				end
			end
		end
	end,
	Enabled = Settings.AutoFarm.FarmingEnabled or false
})

FarmTab.Dropdown({
	Text = "Type",
	Callback = function(Value)
		Settings.AutoFarm.FarmingType = Value
	end,
	Options = {"Normal", "Multi Target", "Chest"}
})

FarmTab.Dropdown({
	Text = "Chest",
	Callback = function(Value)
		Settings.AutoFarm.FarmingSingleChest = Value
	end,
	Options = ChestList
})

FarmTab.Dropdown({
	Text = "Area",
	Callback = function(Value)
		Settings.AutoFarm.FarmingArea = Value
	end,
	Options = AreaList
})

local MyEggData = {}
for EggName, EggData in pairs(_L.Directory.Eggs) do
	table.insert(MyEggData, {
		Name = EggName,
		Currency = EggData.currency,
		Cost = EggData.cost
	})
end

table.sort(MyEggData, function(Table1, Table2)
	return Table1.Cost < Table2.Cost
end)

local EggData = {}
for Index, Currency in pairs(CurrencyOrder) do
	for Index, Data in pairs(MyEggData) do
		if not string.find(Data.Name, "Golden ") and Data.Currency == Currency then
			table.insert(EggData, Data.Name)
		end
	end

    table.insert(EggData, "\t")
end

local EggTab = Frame.New({
	Title = "Eggs"
})

EggTab.Toggle({
	Text = "Open Eggs",
	Callback = function(Value)
		Settings.AutoHatch.OpenEggs = Value
		while task.wait() and Settings.AutoHatch.OpenEggs do
			Network.Invoke("Buy Egg", (Settings.AutoHatch.GoldenEggs and "Golden " or "") .. Settings.AutoHatch.SelectedEgg, Settings.AutoHatch.TripleEggs)
		end
	end,
	Enabled = Settings.AutoHatch.OpenEggs or false
})

EggTab.Dropdown({
	Text = "Egg",
	Callback = function(Value)
		Settings.AutoHatch.SelectedEgg = Value
	end,
	Options = EggData
})

EggTab.Toggle({
	Text = "Golden Eggs",
	Callback = function(Value)
		Settings.AutoHatch.GoldenEggs = Value
	end,
	Enabled = Settings.AutoHatch.GoldenEggs or false
})

EggTab.Toggle({
	Text = "Triple Eggs",
	Callback = function(Value)
		Settings.AutoHatch.TripleEggs = Value
	end,
	Enabled = Settings.AutoHatch.TripleEggs or false
})

local MiscellaneousTab = Frame.New({
	Title = "Miscellaneous"
})

MiscellaneousTab.Button({
	Text = "Remove Open Animation",
	Callback = function()
		for Index, GlobalConnection in pairs(getgc(true)) do
			if (typeof(GlobalConnection) == "table" and rawget(GlobalConnection, "OpenEgg")) then
				GlobalConnection.OpenEgg = function()
					return
				end
			end
		end
	end
})

MiscellaneousTab.Button({
	Text = "Free Passes",
	Callback = function()
		local Save = _L.Save.Get(_L.LocalPlayer, true)
		Save.EquippedHoverboard = Settings.Miscellaneous.Hoverboard or "Original"
		for Index, Connection in pairs(getreg()) do
			if (typeof(Connection) == "table" and rawget(Connection, "Owns")) then
				Connection.Owns = function()
					return true
				end
			end
		end
	end
})

MiscellaneousTab.Toggle({
	Text = "Claim Rewards",
	Callback = function(Value)
		Settings.Miscellaneous.ClaimRewards = Value
		while Settings.Miscellaneous.ClaimRewards do
			Network.Invoke("Redeem Rank Rewards")
			Network.Invoke("Redeem VIP Rewards")
			task.wait(10)
		end
	end,
	Enabled = Settings.Miscellaneous.ClaimRewards or false
})

for Index, Connection in pairs(getconnections(_L.LocalPlayer.Idled)) do
	if Connection.Disable then
		Connection.Disable(Connection)
	elseif Connection.Disconnect then
		Connection.Disconnect(Connection)
	end
end
